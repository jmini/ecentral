buildscript {
  configurations.classpath {
    resolutionStrategy {
      //This is required by 'grgit' version '4.1.1':
      force 'org.eclipse.jgit:org.eclipse.jgit:5.13.0.202109080827-r'
    }
  }
}

plugins {
    id 'java'
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
    id 'org.ajoberstar.git-publish' version '3.0.1'
    id 'org.ajoberstar.grgit' version '4.1.1'
    id 'com.diffplug.spotless' version '5.1.1'
    id 'net.researchgate.release' version '2.6.0'
}

wrapper {
    gradleVersion = '7.3.3'
}

group = 'fr.jmini.utils'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(11)
    }
}

repositories {
    mavenCentral()
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar) {
    from javadoc
    classifier = 'javadoc'
}

dependencies {
    implementation "fr.jmini.utils:mvn-utils:$mvnUtils"
    implementation "biz.aQute.bnd:biz.aQute.bnd:$bndVersion"
    implementation "com.google.code.gson:gson:$gsonVersion"

    testImplementation "org.junit.jupiter:junit-jupiter-api:$junitVersion"
    testImplementation "org.assertj:assertj-core:$assertjVersion"

    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitVersion"
}

test {
    testLogging {
        events = ["passed", "failed", "skipped"]
    }
    doFirst {
        convertProjectPropertyToSystemProperty(delegate, 'ignoreExistingData')
    }
    useJUnitPlatform()
}

def buildDate() {
    return new Date().format('yyyy-MM-dd')
}

configurations {
    asciidoctorExtensions
}

asciidoctorj {
    version = "$asciidoctorjVersion"
}

asciidoctor {
    configurations 'asciidoctorExtensions'
    sourceDir = file('src/docs/asciidoc')
    baseDirFollowsSourceFile()
    outputDir = file('build/docs/html5')
    attributes = ['revdate'             : "${buildDate()}",
                  'project-version'     : "$version",
                  'last-stable-version' : "$lastVersion",
                  'attribute-missing'   : 'warn',
                  'source-highlighter'  : 'coderay',
                  'imagesdir'           : '',
                  'toc'                 : 'left',
                  'icons'               : 'font',
                  'toclevels'           : '3',
                  'sectanchors'         : 'true',
                  'idprefix'            : '',
                  'idseparator'         : '-',
                  'docinfo1'            : 'true']
    repositories {
        mavenCentral()
    }
    dependencies {
        asciidoctorExtensions 'fr.jmini.asciidoctorj:git-link:3.2.1'
    }
}

gitPublish {
    repoUri = 'git@github.com:' + "$githubRepositoryOwner" + '/' + "$githubRepositoryName" + '.git'
    branch = 'gh-pages'

    contents {
        from "${file('build/docs/html5')}"
    }

    preserve {
        include '.nojekyll'
        exclude '.DS_Store'
    }

    commitMessage = "Update the 'gh-pages' branch."
}

spotless {
  java {
    importOrder 'java', 'javax', 'org', 'com', ''
    removeUnusedImports()

    // available versions are: https://github.com/diffplug/spotless/tree/master/lib-extra/src/main/resources/com/diffplug/spotless/extra/eclipse_jdt_formatter
    eclipse('4.13.0').configFile('.settings/org.eclipse.jdt.core.prefs')
  }
}

release {
    buildTasks = ['doRelease']
}

task doRelease {
    dependsOn(
        'checkLastVersionValue',
        'asciidoctor',
        'gitPublishPush'
    )
}

task checkLastVersionValue {
    doLast {
        if(version.endsWith('SNAPSHOT')) {
            throw new GradleException("version '$version' ends with SNAPSHOT, this is not a release build!")
        }
        if(lastVersion != version) {
            throw new GradleException("lastVersion '$lastVersion' does not match version '$version', fix it in the 'gradle.properties' file.")
        }
    }
}

def convertProjectPropertyToSystemProperty(Object delegate, String key) {
    if(project.hasProperty(key)) {
        delegate.systemProperty(key, project.getProperty(key))
    }
}

def updateLastVersionValueTask = tasks.register('updateLastVersionValue') {
    doLast {
        def propertiesFile = file('gradle.properties')
        def content = propertiesFile.text
        content = content.replaceAll("lastVersion=[0-9\\.]+", "lastVersion=" + version.replace('-SNAPSHOT', ''))
        propertiesFile.text = content
    }
}

model {
    tasks.unSnapshotVersion {
        dependsOn updateLastVersionValueTask
    }
}
